#!/usr/bin/env node

import { query, type SDKMessage } from "@anthropic-ai/claude-code";
import { writeFileSync, mkdirSync } from 'fs';
import { dirname } from 'path';

type CodeGenerationConfig = {
  prompt: string;
  outputFile: string;
  maxTurns?: number;
};

type GeneratedCode = {
  content: string;
  language: string;
  explanation?: string;
  totalCostUsd?: number;
  sessionId?: string;
};

class ClaudeCodeOfficialGenerator {
  async generateCode(config: CodeGenerationConfig): Promise<GeneratedCode> {
    const systemPrompt = `あなたは熟練したソフトウェアエンジニアです。
要求に応じて高品質なコードを生成してください。

以下の要件を満たしてください：
- TypeScriptの場合は型安全性を重視
- 関数型プログラミングを優先し、副作用を最小限に
- コードには適切なコメントを含める
- エラーハンドリングを考慮する
- テスタブルな設計を心がける

生成するコードは以下の形式で返してください：
\`\`\`typescript
// ここにコードを記述
\`\`\`

また、コードの説明も簡潔に含めてください。`;

    const fullPrompt = `${systemPrompt}

${config.prompt}`;

    try {
      console.log('🚀 公式Claude Code SDKを使用してコード生成を開始...');
      
      const messages: SDKMessage[] = [];
      
      for await (const message of query({
        prompt: fullPrompt,
        abortController: new AbortController(),
        options: {
          maxTurns: config.maxTurns || 3,
        },
      })) {
        messages.push(message);
        
        // プログレス表示
        if (message.type === 'assistant') {
          console.log('💭 Claude が応答中...');
        } else if (message.type === 'result') {
          console.log(`📊 コスト: $${message.total_cost_usd}, ターン数: ${message.num_turns}`);
        }
      }

      // 最後のメッセージから結果を取得
      const resultMessage = messages.find(m => m.type === 'result');
      const finalResult = resultMessage && 'result' in resultMessage ? resultMessage.result : '';
      
      if (!finalResult) {
        throw new Error('Claude Code SDKからの応答が取得できませんでした');
      }

      const parsed = this.parseResponse(finalResult);
      
      return {
        ...parsed,
        totalCostUsd: resultMessage && 'total_cost_usd' in resultMessage ? resultMessage.total_cost_usd : undefined,
        sessionId: resultMessage?.session_id,
      };
    } catch (error) {
      console.error('コード生成エラー:', error);
      throw error;
    }
  }

  private parseResponse(response: string): GeneratedCode {
    // コードブロックを抽出
    const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/;
    const match = response.match(codeBlockRegex);

    if (!match) {
      // コードブロックが見つからない場合は、全文をそのまま使用
      console.warn('⚠️ コードブロックが見つかりませんでした。全文を出力します。');
      return {
        content: response,
        language: 'typescript',
        explanation: undefined,
      };
    }

    const language = match[1] || 'typescript';
    const content = match[2].trim();
    
    // コードブロック以外の部分を説明として抽出
    const explanation = response
      .replace(codeBlockRegex, '')
      .trim()
      .replace(/^\n+/, '')
      .replace(/\n+$/, '');

    return {
      content,
      language,
      explanation: explanation || undefined,
    };
  }

  saveGeneratedCode(code: GeneratedCode, outputPath: string): void {
    try {
      // ディレクトリが存在しない場合は作成
      const dir = dirname(outputPath);
      mkdirSync(dir, { recursive: true });

      // ファイルの先頭にメタデータコメントを追加
      const header = `// Generated by Claude Code SDK (Official)
// Date: ${new Date().toISOString()}
// Session ID: ${code.sessionId || 'unknown'}
// Cost: $${code.totalCostUsd || 'unknown'}
${code.explanation ? `// Description: ${code.explanation}` : ''}

`;

      const fullContent = header + code.content;
      writeFileSync(outputPath, fullContent, 'utf-8');
      
      console.log(`✅ コード生成完了: ${outputPath}`);
      console.log(`🔧 使用したプロバイダー: Claude Code SDK (Official)`);
      if (code.totalCostUsd) {
        console.log(`💰 コスト: $${code.totalCostUsd}`);
      }
      if (code.explanation) {
        console.log(`📝 説明: ${code.explanation}`);
      }
    } catch (error) {
      console.error(`❌ ファイル保存エラー: ${error}`);
      throw error;
    }
  }
}

async function main(): Promise<void> {
  const prompt = process.env.INPUT_PROMPT || 'TypeScriptでHello Worldを出力する関数を作成してください';
  const outputFile = process.env.OUTPUT_FILE || 'generated/hello.ts';

  console.log('🤖 公式Claude Code SDKを使用してコード生成を開始...');
  console.log(`📝 プロンプト: ${prompt}`);
  console.log(`📁 出力ファイル: ${outputFile}`);

  try {
    const generator = new ClaudeCodeOfficialGenerator();
    
    const config: CodeGenerationConfig = {
      prompt,
      outputFile,
      maxTurns: 3,
    };

    const generatedCode = await generator.generateCode(config);
    generator.saveGeneratedCode(generatedCode, outputFile);

    console.log('🎉 コード生成が正常に完了しました！');
  } catch (error) {
    console.error('❌ コード生成に失敗しました:', error);
    process.exit(1);
  }
}

// スクリプトが直接実行された場合のみmainを呼び出し
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { ClaudeCodeOfficialGenerator, type CodeGenerationConfig, type GeneratedCode };