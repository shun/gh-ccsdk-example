// Generated by Claude Code SDK (AWS Bedrock)
// Date: 2025-07-24T16:05:44.171Z
// Model: apac.anthropic.claude-sonnet-4-20250514-v1:0
// Description: ## コードの説明

このFizzBuzz実装は以下の特徴を持っています：

1. **型安全性**: TypeScriptの型システムを活用し、引数と戻り値の型を明確に定義
2. **関数型アプローチ**: `Array.from`を使用した宣言的なプログラミングスタイル
3. **エラーハンドリング**: 不正な入力値に対する適切な例外処理
4. **テスタブル設計**: 純粋関数として実装し、副作用なし
5. **柔軟性**: 配列を返す版と単一値を返す版の両方を提供
6. **効率性**: 15の倍数チェックを最初に行うことで、重複計算を回避

関数は完全に純粋で、同じ入力に対して常に同じ出力を返し、外部状態に依存しません。

/**
 * FizzBuzz問題を解く関数
 * 1からnまでの数値に対して以下のロジックを適用：
 * - 3の倍数の場合: "Fizz"
 * - 5の倍数の場合: "Buzz"
 * - 3と5の両方の倍数の場合: "FizzBuzz"
 * - それ以外: 数値をそのまま文字列として返す
 */
const fizzBuzz = (n: number): string[] => {
  // 入力値の検証
  if (n < 1 || !Number.isInteger(n)) {
    throw new Error('引数は1以上の整数である必要があります');
  }

  return Array.from({ length: n }, (_, index) => {
    const num = index + 1;
    
    // 3と5の両方で割り切れる場合（15で割り切れる場合）
    if (num % 15 === 0) return 'FizzBuzz';
    
    // 3で割り切れる場合
    if (num % 3 === 0) return 'Fizz';
    
    // 5で割り切れる場合
    if (num % 5 === 0) return 'Buzz';
    
    // それ以外の場合は数値を文字列として返す
    return num.toString();
  });
};

/**
 * 単一の数値に対するFizzBuzz判定を行う関数
 * 配列を生成せずに単一の結果のみを返す
 */
const fizzBuzzSingle = (num: number): string => {
  if (num < 1 || !Number.isInteger(num)) {
    throw new Error('引数は1以上の整数である必要があります');
  }

  if (num % 15 === 0) return 'FizzBuzz';
  if (num % 3 === 0) return 'Fizz';
  if (num % 5 === 0) return 'Buzz';
  return num.toString();
};

// 使用例
const result = fizzBuzz(15);
console.log(result);
// 出力: ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']

// 単一の数値での使用例
console.log(fizzBuzzSingle(15)); // 'FizzBuzz'
console.log(fizzBuzzSingle(9));  // 'Fizz'
console.log(fizzBuzzSingle(10)); // 'Buzz'
console.log(fizzBuzzSingle(7));  // '7'

export { fizzBuzz, fizzBuzzSingle };