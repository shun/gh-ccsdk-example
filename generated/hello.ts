// Generated by Claude Code SDK (via AWS Bedrock)
// Date: 2025-07-24T15:15:43.008Z
// Model: apac.anthropic.claude-sonnet-4-20250514-v1:0
// Description: ## コードの説明

このコードは以下の特徴を持つHello World実装です：

1. **`getHelloWorldMessage`**: 純粋関数として"Hello, World!"メッセージを返します。副作用がなく、テストしやすい設計です。

2. **`printHelloWorld`**: コンソール出力を担当する関数で、オプションでカスタムメッセージを受け取れます。出力という副作用を分離しています。

3. **`createPersonalizedHello`**: 名前を受け取ってパーソナライズされたメッセージを生成します。入力検証とエラーハンドリングを含んでいます。

4. **型安全性**: すべての関数に適切な型注釈を付与し、TypeScriptの恩恵を最大限活用しています。

5. **関数型アプローチ**: 純粋関数を基本とし、副作用（console.log）を必要最小限に抑制しています。

6. **エラーハンドリング**: 不正な入力に対する適切なエラー処理を実装しています。

/**
 * Hello Worldメッセージを返す純粋関数
 * @returns {string} "Hello, World!"メッセージ
 */
const getHelloWorldMessage = (): string => {
  return "Hello, World!";
};

/**
 * Hello Worldメッセージをコンソールに出力する関数
 * @param message - 出力するメッセージ（オプション）
 */
const printHelloWorld = (message?: string): void => {
  const output = message ?? getHelloWorldMessage();
  console.log(output);
};

/**
 * カスタムメッセージでHello形式の挨拶を生成する関数
 * @param name - 挨拶する対象の名前
 * @returns {string} パーソナライズされた挨拶メッセージ
 */
const createPersonalizedHello = (name: string): string => {
  if (!name.trim()) {
    throw new Error("Name cannot be empty");
  }
  return `Hello, ${name.trim()}!`;
};

// 使用例
printHelloWorld(); // "Hello, World!"を出力
printHelloWorld(createPersonalizedHello("TypeScript")); // "Hello, TypeScript!"を出力

// エクスポート（モジュールとして使用する場合）
export { getHelloWorldMessage, printHelloWorld, createPersonalizedHello };