// Generated by Claude Code SDK (via AWS Bedrock)
// Date: 2025-07-24T15:35:17.870Z
// Model: apac.anthropic.claude-sonnet-4-20250514-v1:0
// Description: 以下に素数判定関数のTypeScriptコードを生成しました：



## コードの説明

**主な特徴：**

1. **型安全性**: TypeScriptの型システムを活用し、引数と戻り値の型を明確に定義

2. **効率的なアルゴリズム**: 
   - √nまでの奇数のみをチェックして計算量を最適化
   - 偶数の早期除外により処理を高速化

3. **エラーハンドリング**: 
   - 負数や非整数に対する適切な例外処理
   - 入力値の妥当性検証

4. **関数型アプローチ**: 
   - 純粋関数として実装（副作用なし）
   - イミュータブルな設計

5. **拡張性**: 
   - 範囲指定での素数取得機能も追加
   - テスタブルな構造

この実装は、パフォーマンスと可読性のバランスを取りながら、実用的な素数判定機能を提供します。

/**
 * 指定された数値が素数かどうかを判定する関数
 * @param num - 判定対象の数値
 * @returns 素数の場合true、そうでなければfalse
 * @throws エラー - 負数または非整数が渡された場合
 */
const isPrime = (num: number): boolean => {
  // 入力値の検証
  if (!Number.isInteger(num) || num < 0) {
    throw new Error('引数は0以上の整数である必要があります');
  }

  // 0と1は素数ではない
  if (num <= 1) {
    return false;
  }

  // 2は素数
  if (num === 2) {
    return true;
  }

  // 偶数は素数ではない（2を除く）
  if (num % 2 === 0) {
    return false;
  }

  // 3からsqrt(num)まで奇数のみをチェック
  const sqrt = Math.sqrt(num);
  for (let i = 3; i <= sqrt; i += 2) {
    if (num % i === 0) {
      return false;
    }
  }

  return true;
};

/**
 * 指定された範囲内の素数を全て取得する関数
 * @param start - 開始値（含む）
 * @param end - 終了値（含む）
 * @returns 素数の配列
 */
const getPrimesInRange = (start: number, end: number): number[] => {
  if (start > end) {
    throw new Error('開始値は終了値以下である必要があります');
  }

  const primes: number[] = [];
  for (let i = Math.max(2, start); i <= end; i++) {
    if (isPrime(i)) {
      primes.push(i);
    }
  }

  return primes;
};

// 使用例とテスト
const testNumbers = [0, 1, 2, 3, 4, 5, 17, 25, 29, 97];
console.log('素数判定テスト:');
testNumbers.forEach(num => {
  console.log(`${num}: ${isPrime(num)}`);
});

console.log('\n1から30までの素数:');
console.log(getPrimesInRange(1, 30));