// Generated by Claude Code SDK (AWS Bedrock)
// Date: 2025-07-24T15:45:23.097Z
// Model: apac.anthropic.claude-sonnet-4-20250514-v1:0
// Description: ## コードの説明

このマージソート実装の特徴：

1. **型安全性**: TypeScriptの型システムを活用し、`readonly number[]`で入力の不変性を保証
2. **関数型アプローチ**: 元の配列を変更せず、新しい配列を返す純粋関数として実装
3. **分析統治法**: 配列を再帰的に分割し、ソート済みの部分配列をマージして結果を構築
4. **エラーハンドリング**: ベースケースを適切に処理し、空配列や単一要素配列にも対応
5. **テスタブル設計**: `merge`関数を分離することで、個別にテスト可能

**時間計算量**: O(n log n)  
**空間計算量**: O(n)

この実装は安定ソート（同じ値の要素の相対的な順序を保持）であり、大きなデータセットに対しても一貫したパフォーマンスを提供します。

/**
 * マージソート関数
 * 配列を分割統治法により昇順でソートします
 * 
 * @param arr - ソート対象の数値配列
 * @returns ソート済みの新しい配列
 * @throws Error 配列が空でない場合のみ処理
 */
function mergeSort(arr: readonly number[]): number[] {
  // ベースケース: 配列の長さが1以下の場合はそのまま返す
  if (arr.length <= 1) {
    return [...arr];
  }

  // 配列を中央で分割
  const mid = Math.floor(arr.length / 2);
  const left = arr.slice(0, mid);
  const right = arr.slice(mid);

  // 再帰的に左右の配列をソート
  const sortedLeft = mergeSort(left);
  const sortedRight = mergeSort(right);

  // ソート済みの配列をマージして返す
  return merge(sortedLeft, sortedRight);
}

/**
 * 2つのソート済み配列をマージする補助関数
 * 
 * @param left - ソート済みの左側配列
 * @param right - ソート済みの右側配列
 * @returns マージされたソート済み配列
 */
function merge(left: readonly number[], right: readonly number[]): number[] {
  const result: number[] = [];
  let leftIndex = 0;
  let rightIndex = 0;

  // 両方の配列に要素が残っている間、小さい方を結果に追加
  while (leftIndex < left.length && rightIndex < right.length) {
    if (left[leftIndex] <= right[rightIndex]) {
      result.push(left[leftIndex]);
      leftIndex++;
    } else {
      result.push(right[rightIndex]);
      rightIndex++;
    }
  }

  // 残った要素を結果に追加
  while (leftIndex < left.length) {
    result.push(left[leftIndex]);
    leftIndex++;
  }

  while (rightIndex < right.length) {
    result.push(right[rightIndex]);
    rightIndex++;
  }

  return result;
}

// 使用例とテスト用のコード
const testArray = [64, 34, 25, 12, 22, 11, 90];
const sortedArray = mergeSort(testArray);
console.log('元の配列:', testArray);
console.log('ソート後:', sortedArray);

// エッジケースのテスト
console.log('空配列:', mergeSort([]));
console.log('単一要素:', mergeSort([42]));
console.log('重複要素:', mergeSort([3, 1, 4, 1, 5, 9, 2, 6]));