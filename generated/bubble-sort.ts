// Generated by Claude Code SDK (via AWS Bedrock)
// Date: 2025-07-24T15:38:01.230Z
// Model: apac.anthropic.claude-sonnet-4-20250514-v1:0
// Description: ## コードの説明

**主な特徴:**
- **型安全性**: TypeScriptの型システムを活用し、入力は`readonly number[]`、出力は`number[]`として定義
- **イミュータブル**: 元の配列を変更せず、新しい配列を返すことで副作用を回避
- **エラーハンドリング**: 不正な入力に対する適切な例外処理
- **最適化**: 交換が発生しなかった場合の早期終了により効率を向上

**アルゴリズムの動作:**
1. 隣接する要素を比較し、順序が間違っていれば交換
2. 各パスで最大値が配列の末尾に移動
3. 交換が発生しなくなるまで繰り返し

**時間計算量**: O(n²)、**空間計算量**: O(n)

/**
 * バブルソート関数 - 配列を昇順にソートします
 * @param arr ソート対象の数値配列
 * @returns 新しいソート済み配列（元の配列は変更されません）
 * @throws Error 無効な入力の場合
 */
const bubbleSort = (arr: readonly number[]): number[] => {
  // 入力検証
  if (!Array.isArray(arr)) {
    throw new Error('Input must be an array');
  }
  
  if (arr.some(item => typeof item !== 'number' || isNaN(item))) {
    throw new Error('Array must contain only valid numbers');
  }

  // 元の配列を変更せずに新しい配列を作成（イミュータブル）
  const sortedArray = [...arr];
  const length = sortedArray.length;

  // バブルソートのメインロジック
  for (let i = 0; i < length - 1; i++) {
    let hasSwapped = false;
    
    // 各パスで最大値を末尾に移動
    for (let j = 0; j < length - 1 - i; j++) {
      if (sortedArray[j] > sortedArray[j + 1]) {
        // 要素の交換
        [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];
        hasSwapped = true;
      }
    }
    
    // 交換が発生しなかった場合、配列は既にソート済み
    if (!hasSwapped) {
      break;
    }
  }

  return sortedArray;
};

/**
 * 使用例とテスト用のヘルパー関数
 */
const testBubbleSort = (): void => {
  try {
    // テストケース
    const testCases: readonly number[][] = [
      [64, 34, 25, 12, 22, 11, 90],
      [5, 2, 8, 1, 9],
      [1, 2, 3, 4, 5], // 既にソート済み
      [5, 4, 3, 2, 1], // 逆順
      [42], // 単一要素
      [] // 空配列
    ];

    testCases.forEach((testCase, index) => {
      const result = bubbleSort(testCase);
      console.log(`Test ${index + 1}:`);
      console.log(`Input:  [${testCase.join(', ')}]`);
      console.log(`Output: [${result.join(', ')}]`);
      console.log('---');
    });
  } catch (error) {
    console.error('Error during testing:', error);
  }
};

export { bubbleSort, testBubbleSort };