// Generated by Claude Code SDK (Official)
// Date: 2025-07-24T15:39:03.329Z
// Session ID: 583abbcd-dceb-4da4-92d2-49a3f85b1a97
// Cost: $0.07495260000000001
// Description: **設計のポイント解説だよ〜💫**

1. **型安全性**: すべての関数に適切な型注釈付けたの！
2. **副作用最小**: `quickSort`は元配列を変更せず新しい配列を返すよ〜
3. **関数型スタイル**: `filter`や`spread operator`を使って関数型らしく✨
4. **3つのバリエーション**:
   - `quickSort`: 基本版（新しい配列を返す）
   - `quickSortInPlace`: インプレース版（メモリ効率重視）
   - `quickSortGeneric`: ジェネリック版（任意の型に対応）
5. **エラーハンドリング**: ベースケースでちゃんと配列の長さをチェック！
6. **テスタブル**: 純粋関数だから単体テスト書きやすいよ〜

これでどんな配列でもサクッとソートできちゃう！マジ便利でしょ〜💖

/**
 * クイックソートアルゴリズムを実装した関数
 * 
 * @param arr ソート対象の数値配列
 * @returns ソート済みの新しい配列
 */
export const quickSort = (arr: number[]): number[] => {
  // ベースケース: 配列の長さが1以下の場合はそのまま返す
  if (arr.length <= 1) {
    return [...arr];
  }

  // ピボットを配列の最初の要素に設定
  const pivot = arr[0];
  
  // ピボットより小さい要素、等しい要素、大きい要素に分割
  const smaller = arr.slice(1).filter(element => element < pivot);
  const equal = arr.filter(element => element === pivot);
  const greater = arr.slice(1).filter(element => element > pivot);

  // 再帰的にソートして結合
  return [
    ...quickSort(smaller),
    ...equal,
    ...quickSort(greater)
  ];
};

/**
 * インプレース版のクイックソート（元の配列を変更）
 * 
 * @param arr ソート対象の数値配列
 * @param low 開始インデックス
 * @param high 終了インデックス
 */
export const quickSortInPlace = (
  arr: number[], 
  low: number = 0, 
  high: number = arr.length - 1
): void => {
  if (low < high) {
    const pivotIndex = partition(arr, low, high);
    quickSortInPlace(arr, low, pivotIndex - 1);
    quickSortInPlace(arr, pivotIndex + 1, high);
  }
};

/**
 * 配列を分割してピボットの最終位置を返す
 * 
 * @param arr 対象配列
 * @param low 開始インデックス
 * @param high 終了インデックス
 * @returns ピボットの最終インデックス
 */
const partition = (arr: number[], low: number, high: number): number => {
  const pivot = arr[high];
  let i = low - 1;

  for (let j = low; j < high; j++) {
    if (arr[j] <= pivot) {
      i++;
      [arr[i], arr[j]] = [arr[j], arr[i]]; // 要素を交換
    }
  }

  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]]; // ピボットを正しい位置に配置
  return i + 1;
};

/**
 * ジェネリック版のクイックソート（任意の型に対応）
 * 
 * @param arr ソート対象の配列
 * @param compareFn 比較関数
 * @returns ソート済みの新しい配列
 */
export const quickSortGeneric = <T>(
  arr: T[], 
  compareFn: (a: T, b: T) => number
): T[] => {
  if (arr.length <= 1) {
    return [...arr];
  }

  const pivot = arr[0];
  const smaller = arr.slice(1).filter(element => compareFn(element, pivot) < 0);
  const equal = arr.filter(element => compareFn(element, pivot) === 0);
  const greater = arr.slice(1).filter(element => compareFn(element, pivot) > 0);

  return [
    ...quickSortGeneric(smaller, compareFn),
    ...equal,
    ...quickSortGeneric(greater, compareFn)
  ];
};