// Generated by Claude Code SDK (via AWS Bedrock)
// Date: 2025-07-24T14:51:08.459Z
// Model: apac.anthropic.claude-sonnet-4-20250514-v1:0
// Description: 以下がFibonacci数列を計算するTypeScript関数です：



## コードの説明

### 主な特徴：

1. **メモ化による最適化**: クロージャを使用してメモ化を実装し、重複計算を回避
2. **BigInt使用**: 大きな数値でも正確な計算が可能
3. **型安全性**: TypeScriptの型システムを活用した厳密な型定義
4. **エラーハンドリング**: 不正な入力値に対する適切なエラー処理
5. **複数の実装方式**: 
   - 再帰+メモ化版（`fibonacci`）
   - 反復版（`fibonacciIterative`）- スタックオーバーフロー回避
   - 数列生成版（`fibonacciSequence`）

### 関数型プログラミングの要素：
- 純粋関数として設計（副作用なし）
- イミュータブルなデータ操作
- 高階関数の活用（クロージャ）

### テスタビリティ：
- 各関数は独立してテスト可能
- エラーケースも含めた包括的なテスト対応
- 使用例とテスト関数も提供

/**
 * Fibonacci数列のn番目の値を計算する（メモ化版）
 * @param n - 計算したい項数（0以上の整数）
 * @returns n番目のFibonacci数
 * @throws {Error} 負の数が渡された場合
 */
const fibonacci = (() => {
  const memo = new Map<number, bigint>();
  
  return function(n: number): bigint {
    // 入力値の検証
    if (n < 0) {
      throw new Error('引数は0以上の整数である必要があります');
    }
    if (!Number.isInteger(n)) {
      throw new Error('引数は整数である必要があります');
    }
    
    // メモ化されている場合は cached 値を返す
    if (memo.has(n)) {
      return memo.get(n)!;
    }
    
    // ベースケース
    if (n <= 1) {
      memo.set(n, BigInt(n));
      return BigInt(n);
    }
    
    // 再帰的に計算してメモ化
    const result = fibonacci(n - 1) + fibonacci(n - 2);
    memo.set(n, result);
    return result;
  };
})();

/**
 * Fibonacci数列の最初のcount個の値を配列で返す
 * @param count - 取得したい項数
 * @returns Fibonacci数列の配列
 */
const fibonacciSequence = (count: number): bigint[] => {
  if (count <= 0) {
    return [];
  }
  
  return Array.from({ length: count }, (_, index) => fibonacci(index));
};

/**
 * 反復的なFibonacci実装（大きな数値に対してスタックオーバーフローを避ける）
 * @param n - 計算したい項数
 * @returns n番目のFibonacci数
 */
const fibonacciIterative = (n: number): bigint => {
  if (n < 0) {
    throw new Error('引数は0以上の整数である必要があります');
  }
  if (!Number.isInteger(n)) {
    throw new Error('引数は整数である必要があります');
  }
  
  if (n <= 1) {
    return BigInt(n);
  }
  
  let prev = 0n;
  let current = 1n;
  
  for (let i = 2; i <= n; i++) {
    const next = prev + current;
    prev = current;
    current = next;
  }
  
  return current;
};

// 使用例とテスト
const testFibonacci = (): void => {
  console.log('Fibonacci数列の最初の10項:');
  console.log(fibonacciSequence(10).map(n => n.toString()));
  
  console.log('\n特定の項の計算:');
  console.log(`fibonacci(10) = ${fibonacci(10)}`);
  console.log(`fibonacciIterative(10) = ${fibonacciIterative(10)}`);
  
  // 大きな数値のテスト
  console.log(`fibonacci(100) = ${fibonacci(100)}`);
};

// エクスポート
export { fibonacci, fibonacciSequence, fibonacciIterative, testFibonacci };